diff -Nur GD-2.01.orig/GD.pm GD-2.01/GD.pm
--- GD-2.01.orig/GD.pm	Fri Aug  9 18:38:10 2002
+++ GD-2.01/GD.pm	Wed Sep 11 20:45:20 2002
@@ -157,6 +157,14 @@
   return $pack->_new(@_, 0);
 }
 
+sub GD::Image::newFromGif {
+    croak("Usage: newFromGif(class,filehandle)") unless @_==2;
+    my($class,$f) = @_;
+    my $fh = $class->_make_filehandle($f);
+    binmode($fh);
+    $class->_newFromGif($fh);
+}
+
 sub GD::Image::newFromPng {
     croak("Usage: newFromPng(class,filehandle,[truecolor])") unless @_>=2;
     my($class) = shift;
@@ -411,6 +419,9 @@
     # make sure we are writing to a binary stream
     binmode STDOUT;
 
+    # Convert the image to GIF and print it on standard output
+    print $im->gif;
+
     # Convert the image to PNG and print it on standard output
     print $im->png;
 
@@ -419,7 +430,8 @@
 B<GD.pm> is a Perl interface to Thomas Boutell's gd graphics library
 (version 2.01 or higher; see below). GD allows you to create color
 drawings using a large number of graphics primitives, and emit the
-drawings as PNG files.
+drawings as PNG files.  This version is patched to reintroduce GIF
+support.
 
 GD defines the following three classes:
 
@@ -473,6 +485,9 @@
 	# make sure we are writing to a binary stream
 	binmode STDOUT;
 
+	# Convert the image to GIF and print it on standard output
+	print $im->gif;
+
 	# Convert the image to PNG and print it on standard output
 	print $im->png;
 
@@ -484,7 +499,7 @@
 To create a new, empty image, send a new() message to GD::Image, passing
 it the width and height of the image you want to create.  An image
 object will be returned.  Other class methods allow you to initialize
-an image from a preexisting JPG, PNG, GD, GD2 or XBM file.
+an image from a preexisting JPG, PNG, GIF, GD, GD2 or XBM file.
 
 =item 2.
 Next you will ordinarily add colors to the image's color table.
@@ -547,7 +562,7 @@
 Alternatively, you may create a GD::Image object based on an existing
 image by providing an open filehandle, a filename, or the image data
 itself.  The image formats automatically recognized and accepted are:
-PNG, JPEG, XPM and GD2.  Other formats, including WBMP, and GD
+PNG, JPEG, XPM and GD2.  Other formats, including GIF, WBMP, and GD
 version 1, cannot be recognized automatically at this time.
 
 If something goes wrong (e.g. insufficient memory), this call will
@@ -682,6 +697,13 @@
 This reads a 100x100 square portion of the image starting from
 position (10,20).
 
+=item B<$image = GD::Image-E<gt>newFromGif($file)>
+
+=item B<$image = GD::Image-E<gt>newFromGifData($data)>
+
+This works in exactly the same way as C<newFromGd()> and
+newFromGdData, but use the GIF image format.
+
 =item B<$image = GD::Image-E<gt>newFromXpm($filename)>
 
 This creates a new GD::Image object starting from a B<filename>.  This
@@ -723,6 +745,11 @@
 Note the use of C<binmode()>.  This is crucial for portability to
 DOSish platforms.
 
+=item B<$gifdata = $image-E<gt>gif>
+
+This returns the image data in GIF format.  You can then print it,
+pipe it to a display program, or write it to a file. 
+
 =item B<$jpegdata = $image-E<gt>jpeg([$quality])>
 
 This returns the image data in JPEG format.  You can then print it,
@@ -863,7 +890,7 @@
 This marks the color at the specified index as being transparent.
 Portions of the image drawn in this color will be invisible.  This is
 useful for creating paintbrushes of odd shapes, as well as for
-making PNG backgrounds transparent for displaying on the Web.  Only
+making PNG & GIF backgrounds transparent for displaying on the Web.  Only
 one color can be transparent at any time. To disable transparency, 
 specify -1 for the index.  
 
diff -Nur GD-2.01.orig/GD.xs GD-2.01/GD.xs
--- GD-2.01.orig/GD.xs	Fri Aug  9 18:26:29 2002
+++ GD-2.01/GD.xs	Wed Sep 11 21:04:51 2002
@@ -250,6 +250,7 @@
 
 #ifdef PERL_OBJECT
 #  ifdef WIN32
+#define GDIMAGECREATEFROMGIF(x) gdImageCreateFromGif((FILE*)x)
 #define GDIMAGECREATEFROMPNG(x) gdImageCreateFromPng((FILE*)x)
 #define GDIMAGECREATEFROMXBM(x) gdImageCreateFromXbm((FILE*)x)
 #define GDIMAGECREATEFROMJPEG(x) gdImageCreateFromJpeg((FILE*)x)
@@ -260,6 +261,7 @@
 #  endif
 #else
 #  ifdef USE_PERLIO
+#define GDIMAGECREATEFROMGIF(x) gdImageCreateFromGif(PerlIO_findFILE(x))
 #define GDIMAGECREATEFROMPNG(x) gdImageCreateFromPng(PerlIO_findFILE(x))
 #define GDIMAGECREATEFROMXBM(x) gdImageCreateFromXbm(PerlIO_findFILE(x))
 #define GDIMAGECREATEFROMJPEG(x) gdImageCreateFromJpeg(PerlIO_findFILE(x))
@@ -268,6 +270,7 @@
 #define GDIMAGECREATEFROMGD2(x) gdImageCreateFromGd2(PerlIO_findFILE(x))
 #define GDIMAGECREATEFROMGD2PART(x,a,b,c,d) gdImageCreateFromGd2Part(PerlIO_findFILE(x),a,b,c,d)
 #  else
+#define GDIMAGECREATEFROMGIF(x) gdImageCreateFromGif(x)
 #define GDIMAGECREATEFROMPNG(x) gdImageCreateFromPng(x)
 #define GDIMAGECREATEFROMXBM(x) gdImageCreateFromXbm(x)
 #define GDIMAGECREATEFROMJPEG(x) gdImageCreateFromJpeg(x)
@@ -537,6 +540,30 @@
 	RETVAL
 
 GD::Image
+gdnewFromGifData(packname="GD::Image", imageData)
+	char *	packname
+	SV *  imageData
+	PROTOTYPE: $$
+        PREINIT:
+	  gdIOCtx* ctx;
+          char*    data;
+          STRLEN   len;
+          SV* errormsg;
+	CODE:
+#ifdef HAVE_GIF
+	data = SvPV(imageData,len);
+        ctx = newDynamicCtx(data,len);
+	RETVAL = (GD__Image) gdImageCreateFromGifCtx(ctx);
+        ctx->free(ctx);
+#else
+    errormsg = perl_get_sv("@",0);
+    sv_setpv(errormsg,"libgd was not built with gif support\n");
+    XSRETURN_EMPTY;
+#endif
+	OUTPUT:
+	RETVAL
+
+GD::Image
 gdnewFromJpegData(packname="GD::Image", imageData, ...)
 	char *	packname
 	SV *    imageData
@@ -584,6 +611,24 @@
 	RETVAL
 
 GD::Image
+gd_newFromGif(packname="GD::Image", filehandle)
+	char *	packname
+	InputStream	filehandle
+	PROTOTYPE: $$
+	PREINIT:
+		SV* errormsg;
+	CODE:
+#ifdef HAVE_GIF
+	RETVAL = (GD__Image) GDIMAGECREATEFROMGIF(filehandle);
+#else
+    errormsg = perl_get_sv("@",0);
+    sv_setpv(errormsg,"libgd was not built with gif support\n");
+    XSRETURN_EMPTY;
+#endif
+ 	OUTPUT:
+ 	RETVAL
+ 
+GD::Image
 gd_newFromXbm(packname="GD::Image", filehandle)
 	char *	packname
 	InputStream	filehandle
@@ -725,6 +770,29 @@
   }
   OUTPUT:
     RETVAL
+
+SV*
+gdgif(image)
+  GD::Image	image
+  PROTOTYPE: $
+  PREINIT:
+    SV* errormsg;
+  CODE:
+  {
+	void*         data;
+	int           size;
+#ifdef HAVE_GIF
+	data = (void *) gdImageGifPtr(image,&size);
+	RETVAL = newSVpv((char*) data,size);
+	free(data);
+#else
+	errormsg = perl_get_sv("@",0);
+	sv_setpv(errormsg,"libgd was not built with gif support\n");
+	XSRETURN_EMPTY;
+#endif
+  }
+  OUTPUT:
+    RETVAL
 
 SV*
 gdjpeg(image,quality=-1)
diff -Nur GD-2.01.orig/Makefile.PL GD-2.01/Makefile.PL
--- GD-2.01.orig/Makefile.PL	Fri Aug  9 18:37:59 2002
+++ GD-2.01/Makefile.PL	Wed Sep 11 21:06:08 2002
@@ -15,6 +15,7 @@
 my $JPEG    = lc prompt('Build JPEG support?','y') eq 'y';
 my $FT      = lc prompt('Build FreeType support?','y') eq 'y';
 my $XPM     = $^O !~ /^freebsd|MSWin32$/ && lc prompt('Build XPM support?','y') eq 'y';
+my $GIF	    = lc prompt('Build GIF support (for patched versions of gd)?','y') eq 'y';
 
 my $FCGI    = 0;   # set to 1 to build compatability with fastCGI
 
@@ -37,6 +38,7 @@
 $DEFINES    .= ' -DHAVE_JPEG' if $JPEG;
 $DEFINES    .= ' -DHAVE_FT'   if $FT;
 $DEFINES    .= ' -DHAVE_XPM'  if $XPM;
+$DEFINES    .= ' -DHAVE_GIF'  if $GIF;
 $DEFINES    .= ' -DFCGI'      if $FCGI;
 
 WriteMakefile(
